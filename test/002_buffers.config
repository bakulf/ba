<BA>
  <audio>
    <buffers>4</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[

      BA_UT_ok(!!buffers, "Buffers array exists");
      BA_UT_ok(buffers === buffers, "Buffers == buffers");

      BA_UT_is(buffers.length, 4, "Buffers array has 4 elements");

      // Checking the methods/properties:
      for (var i = 0; i < buffers.length; ++i) {
        BA_UT_ok(!!buffers[i], "Buffers[" + i + "] exists");
        BA_UT_ok("dataType" in buffers[i], "Buffers[" + i + "].dataType exists");
        BA_UT_ok("play" in buffers[i], "Buffers[" + i + "].play exists");
        BA_UT_ok("stop" in buffers[i], "Buffers[" + i + "].stop exists");
        BA_UT_ok("playing" in buffers[i], "Buffers[" + i + "].playing exists");
        BA_UT_ok("select" in buffers[i], "Buffers[" + i + "].select exists");
        BA_UT_ok("loop" in buffers[i], "Buffers[" + i + "].loop exists");
        BA_UT_ok("speed" in buffers[i], "Buffers[" + i + "].speed exists");
        BA_UT_ok("volume" in buffers[i], "Buffers[" + i + "].volume exists");
        BA_UT_ok("volumes" in buffers[i], "Buffers[" + i + "].volumes exists");
        BA_UT_ok("filters" in buffers[i], "Buffers[" + i + "].filters exists");
      }

      BA_UT_ok(currentBuffer === currentBuffer, "currentBuffer === currentBuffer");

      BA_UT_ok(currentBuffer === buffers[0], "Buffers[0] is the currentBuffer");
      BA_UT_ok(currentBuffer !== buffers[1], "Buffers[1] is not the currentBuffer");

      // Selecting buffers
      buffers[0].select();
      BA_UT_ok(currentBuffer === buffers[0], "Buffers[0] is the currentBuffer");
      BA_UT_ok(currentBuffer !== buffers[1], "Buffers[1] is not the currentBuffer");

      buffers[1].select();
      BA_UT_ok(currentBuffer === buffers[1], "Buffers[1] is the currentBuffer");
      BA_UT_ok(currentBuffer !== buffers[2], "Buffers[2] is not the currentBuffer");

      // DataType
      BA_UT_is(currentBuffer.dataType, "", "Default: empty dataType");

      // Play/Stop
      BA_UT_is(currentBuffer.playing, false, "Default: no playing");

      try {
        currentBuffer.play("12312321321321")
        BA_UT_ok(false, "Play(something) should throw");
      } catch(e) {
        BA_UT_ok(true, "Play(something) should throw");
      }

      currentBuffer.play()
      BA_UT_is(currentBuffer.playing, true, "Now it should be playing");
      currentBuffer.stop()
      BA_UT_is(currentBuffer.playing, false, "Now it should be stopped");

      // Loop
      BA_UT_is(currentBuffer.loop, false, "Default: no looping");
      currentBuffer.loop = true
      BA_UT_is(currentBuffer.loop, true, "Now loop == true");

      // Speed
      BA_UT_is(currentBuffer.speed, 1.0, "Default speed is 1.0");
      try {
        currentBuffer.speed = "what";
        BA_UT_ok(false, "Speed = foo should throw");
      } catch(e) {
        BA_UT_ok(true, "Speed = foo should throw");
      }

      currentBuffer.speed = 4.123;
      BA_UT_is(currentBuffer.speed, 4.123, "speed is 4.123");
      currentBuffer.speed = -9;
      BA_UT_is(currentBuffer.speed, -9, "speed is -9");

      // Volume
      BA_UT_is(currentBuffer.volume, 1.0, "Default volume is 1.0");
      BA_UT_is(currentBuffer.volumes.length, 2, "Default volumes.length == 2");
      BA_UT_is(currentBuffer.volumes[0], 1.0, "Default volumes[0] is 1.0");
      BA_UT_is(currentBuffer.volumes[1], 1.0, "Default volumes[1] is 1.0");

      //Setting a new volume
      currentBuffer.volume = 0.5;
      BA_UT_is(currentBuffer.volume, 0.5, "Now volume is 0.5");
      BA_UT_is(currentBuffer.volumes[0], 0.5, "Now volumes[0] is 0.5");
      BA_UT_is(currentBuffer.volumes[1], 0.5, "Now volumes[1] is 0.5");

      //Setting a new volume for each channel
      currentBuffer.volumes[0] = 0.2;
      currentBuffer.volumes[1] = 0.9;
      BA_UT_is(currentBuffer.volume, 0.55, "Now volume is 0.55");
      BA_UT_is(currentBuffer.volumes[0], 0.2, "Now volumes[0] is 0.2");
      BA_UT_is(currentBuffer.volumes[1], 0.9, "Now volumes[1] is 0.9");

      currentBuffer.volume = 0.7;
      BA_UT_is(currentBuffer.volume, 0.7, "Now volume is 0.7");
      BA_UT_is(currentBuffer.volumes[0], 0.7, "Now volumes[0] is 0.7");
      BA_UT_is(currentBuffer.volumes[1], 0.7, "Now volumes[1] is 0.7");

      // Filters are tested in another utest.

      quit()
    ]]>
    </key>
  </code>
</BA>

