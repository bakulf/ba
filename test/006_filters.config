<BA>
  <audio>
    <buffers>4</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[

      BA_UT_ok(!!filters, "Filters array exists");
      BA_UT_ok(filters === filters, "Filters == filters");

      BA_UT_ok("length" in filters, "filters.length exists");
      BA_UT_ok("find" in filters, "filters.find exists");
      BA_UT_ok("push" in filters, "filters.push exists");
      BA_UT_ok("pop" in filters, "filters.pop exists");
      BA_UT_ok("reverse" in filters, "filters.reverse exists");
      BA_UT_ok("shift" in filters, "filters.shift exists");
      BA_UT_ok("sort" in filters, "filters.sort exists");
      BA_UT_ok("splice" in filters, "filters.splice exists");
      BA_UT_ok("unshift" in filters, "filters.unshift exists");

      BA_UT_is(filters.length, 0, "filters is empty");

      // Push
      try {
        filters.push();
        BA_UT_ok(false, "filter.push() should throw");
      } catch(e) {
        BA_UT_ok(true, "filter.push() should throw");
      }

      try {
        filters.push(123);
        BA_UT_ok(false, "filter.push(<non filter>) should throw");
      } catch(e) {
        BA_UT_ok(true, "filter.push(<non filter>) should throw");
      }

      filters.push(new AtanDistortion(123));
      BA_UT_is(filters.length, 1, "filters is not empty");

      // Find
      BA_UT_is(filters.find("foo"), null, "filters.find() returns null");
      BA_UT_ok(filters.find("atandistortion"), "filters.find('atandistortion') returns object");

      // Pop
      var filter = filters.pop();
      BA_UT_ok(!!filter, "filters.pop() returns something");
      BA_UT_is(filters.length, 0, "filters is empty");
      filters.push(filter);
      BA_UT_is(filters.length, 1, "filters is not empty");

      BA_UT_ok(filters[0] === filter, "Filters[0] === filter");

      var filter2 = new AtanDistortion(123);
      filters.push(filter2);
      BA_UT_ok(filters[0] === filter, "Filters[0] === filter");
      BA_UT_ok(filters[1] === filter2, "Filters[1] === filter2");

      // Reverse
      filters.reverse();
      BA_UT_is(filters.length, 2, "After reverse, still 2");
      BA_UT_ok(filters[0] === filter2, "Filters[0] === filter2");
      BA_UT_ok(filters[1] === filter, "Filters[1] === filter");

      // Switch
      filters[1] = filters[0]
      BA_UT_ok(filters[1] === filters[0], "Filters[1] === filters[0]");

      // Unshift
      var filter2 = new AtanDistortion(123);
      filters.unshift(filter2);
      BA_UT_ok(filters[0] === filter2, "Filters[0] === filter2");

      // Shift
      BA_UT_ok(filters.shift() === filter2, "Filters.shift() === filter2");

      try {
        filters.sort();
        BA_UT_ok(false, "Sort() should throw");
      } catch(e) {
        BA_UT_ok(true, "Sort() should throw");
      }

      try {
        filters.splice();
        BA_UT_ok(false, "Splice() should throw");
      } catch(e) {
        BA_UT_ok(true, "Splice() should throw");
      }

      for (var i = 0; i < filters.length; ++i) {
        BA_UT_ok("name" in filters[i], "filters[" + i + "].name exists");
        BA_UT_ok("update" in filters[i], "filters[" + i + "].update exists");

        BA_UT_is(typeof(filters[i].name), "string", "filters[" + i + "].name is a String");
      }

      quit()
    ]]>
    </key>
  </code>
</BA>

