<BA>
  <audio>
    <buffers>4</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[
      var filter = Compressor(1);
      BA_UT_ok(filter, "Compressor() exists.");
      BA_UT_is(filter.name, "compressor", "Compressor().name == 'compressor'");
      BA_UT_is(filter.ratio, 1, "Compressor().ratio == 1");
      BA_UT_is(filter.threshold, 0.9, "Compressor().threshold == 0.9");
      BA_UT_is(filter.attach, 1, "Compressor().attach == 1");
      BA_UT_is(filter.release, 0.9995, "Compressor().release == 0.9995");

      filter = Compressor(1, 2, 3, 4);
      BA_UT_ok(filter, "Compressor() exists.");
      BA_UT_is(filter.name, "compressor", "Compressor().name == 'compressor'");
      BA_UT_is(filter.ratio, 1, "Compressor().ratio == 1");
      BA_UT_is(filter.threshold, 2, "Compressor().threshold == 2");
      BA_UT_is(filter.attach, 3, "Compressor().attach == 2");
      BA_UT_is(filter.release, 4, "Compressor().release == 4");

      function testAttr(obj, name) {
        var value = Math.random();
        obj[name] = value;
        BA_UT_is(obj[name], value, "Compressor()." + name + " == " + value);

        try {
          obj[name] = "foobar";
          BA_UT_ok(false, "Compressor." + name + " = foo should throw");
        } catch(e) {
          BA_UT_ok(true, "Compressor." + name + " = foo should throw");
        }
      }

      testAttr(filter, 'ratio');
      testAttr(filter, 'threshold');
      testAttr(filter, 'attach');
      testAttr(filter, 'release');

      try {
        filter.update();
        BA_UT_ok(false, "Compressor.update() with no arguments should throw");
      } catch(e) {
        BA_UT_ok(true, "Compressor.update() with no arguments should throw");
      }

      try {
        filter.update("foo");
        BA_UT_ok(false, "Compressor.update() with wrong arguments should throw");
      } catch(e) {
        BA_UT_ok(true, "Compressor.update() with wrgon arguments should throw");
      }

      filter.update(11);
      BA_UT_is(filter.ratio, 11, "Compressor().ratio == 11");
      BA_UT_is(filter.threshold, 0.9, "Compressor().threshold == 0.9");
      BA_UT_is(filter.attach, 1, "Compressor().attach == 1");
      BA_UT_is(filter.release, 0.9995, "Compressor().release == 0.9995");

      filter.update(11, 22, 33, 44);
      BA_UT_is(filter.ratio, 11, "Compressor().ratio == 11");
      BA_UT_is(filter.threshold, 22, "Compressor().threshold == 22");
      BA_UT_is(filter.attach, 33, "Compressor().attach == 33");
      BA_UT_is(filter.release, 44, "Compressor().release == 44");

      quit();
    ]]>
    </key>
  </code>
</BA>
