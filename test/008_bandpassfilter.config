<BA>
  <audio>
    <buffers>4</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[
      var filter = Bandpass(1, 2);
      BA_UT_ok(filter, "Bandpass() exists.");
      BA_UT_is(filter.name, "bandpass", "Bandpass().name == 'bandpass'");
      BA_UT_is(filter.cutOff, 1, "Bandpass().cutOff == 1");
      BA_UT_is(filter.resonance, 2, "Bandpass().resonance == 2");

      filter.cutOff = 3;
      BA_UT_is(filter.cutOff, 3, "Bandpass().cutOff == 3");

      try {
        filter.cutOff = "foobar";
        BA_UT_ok(false, "Bandpass.cutOff = foo should throw");
      } catch(e) {
        BA_UT_ok(true, "Bandpass.cutOff = foo should throw");
      }

      filter.resonance = 4;
      BA_UT_is(filter.resonance, 4, "Bandpass().resonance == 4");

      try {
        filter.resonance = "foobar";
        BA_UT_ok(false, "Bandpass.resonance = foo should throw");
      } catch(e) {
        BA_UT_ok(true, "Bandpass.resonance = foo should throw");
      }

      try {
        filter.update();
        BA_UT_ok(false, "Bandpass.update() with no arguments should throw");
      } catch(e) {
        BA_UT_ok(true, "Bandpass.update() with no arguments should throw");
      }

      try {
        filter.update("foo", "bar");
        BA_UT_ok(false, "Bandpass.update() with wrong arguments should throw");
      } catch(e) {
        BA_UT_ok(true, "Bandpass.update() with wrgon arguments should throw");
      }

      filter.update(8, 9);
      BA_UT_is(filter.cutOff, 8, "Bandpass().cutOff == 8");
      BA_UT_is(filter.resonance, 9, "Bandpass().resonance == 9");

      quit();
    ]]>
    </key>
  </code>
</BA>


