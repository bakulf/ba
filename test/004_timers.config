<BA>
  <audio>
    <buffers>1</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[
      function testTimeouts() {
        // Timeout
        try {
          setTimeout();
          BA_UT_ok(false, "SetTimeout should throw if not args");
        } catch(e) {
          BA_UT_ok(true, "SetTimeout should throw if not args");
        }

        try {
          setTimeout(function() {});
          BA_UT_ok(false, "SetTimeout should throw if just 1 arg");
        } catch(e) {
          BA_UT_ok(true, "SetTimeout should throw if just 1 arg");
        }

        try {
          setTimeout("foo bar", 123);
          BA_UT_ok(false, "SetTimeout should throw if arg[1] is not a function");
        } catch(e) {
          BA_UT_ok(true, "SetTimeout should throw if arg[1] is not a function");
        }

        var tId = setTimeout(function() {
          BA_UT_ok(false, "This should not be called!");
        }, 10);
        BA_UT_ok(tId != 0, "SetTimeout should return an ID");
        clearTimeout(tId);

        function timeoutCb() {
          BA_UT_ok(true, "This method has been called!");
          next();
        }

        setTimeout(timeoutCb, 400);
      }

      function testIntervals() {
        try {
          setInterval();
          BA_UT_ok(false, "SetInterval should throw if not args");
        } catch(e) {
          BA_UT_ok(true, "SetInterval should throw if not args");
        }

        try {
          setInterval(function() {});
          BA_UT_ok(false, "SetInterval should throw if just 1 arg");
        } catch(e) {
          BA_UT_ok(true, "SetInterval should throw if just 1 arg");
        }

        try {
          setInterval("foo bar", 123);
          BA_UT_ok(false, "SetInterval should throw if arg[1] is not a function");
        } catch(e) {
          BA_UT_ok(true, "SetInterval should throw if arg[1] is not a function");
        }

        var tId = setInterval(function() {
          BA_UT_ok(false, "This should not be called!");
        }, 10);
        BA_UT_ok(tId != 0, "SetInterval should return an ID");
        clearInterval(tId);

        var intervals = 4;
        function intervalCb() {
          BA_UT_ok(true, "This interval callback has been called");
          if (!--intervals) next();
        }

        setInterval(intervalCb, 200);
      }

      var tests = [testTimeouts, testIntervals];

      function next() {
        if (!tests.length) {
          quit();
        } else {
          var test = tests.shift();
          test();
        }
      }

      next();
    ]]>
    </key>
  </code>
</BA>



