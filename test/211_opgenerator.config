<BA>
  <audio>
    <buffers>4</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[
      var rect = Rect(600);
      var sine = Sinewave(600);

      var op = new Op(Op.SUM, rect, sine);
      BA_UT_ok(op, "Op() generator exists.");
      BA_UT_is(op.name, "op", "Op().name generator exists.");
      BA_UT_is(op.type, Op.SUM, "Op().type == Op.SUM.");

      BA_UT_is(op[0], rect, "Op[0] == rect");
      BA_UT_is(op[1], sine, "Op[1] == sine");

      op = new Op(Op.SUM, 5, 6);
      BA_UT_is(op.type, Op.SUM, "Op().type == Op.SUM.");
      BA_UT_is(op.get(), 11, "5 + 6 ==> 11");
      op[1] = 7;
      BA_UT_is(op.get(), 12, "5 + 7 ==> 12");

      op = new Op(Op.DIFF, 5, 6);
      BA_UT_is(op.type, Op.DIFF, "Op().type == Op.DIFF.");
      BA_UT_is(op.get(), -1, "5 - 6 ==> -1");
      op[1] = 7;
      BA_UT_is(op.get(), -2, "5 - 7 ==> -2");

      op = new Op(Op.PROD, 5, 6);
      BA_UT_is(op.type, Op.PROD, "Op().type == Op.PROD.");
      BA_UT_is(op.get(), 30, "5 * 6 ==> 30");
      op[1] = 7;
      BA_UT_is(op.get(), 35, "5 * 7 ==> 35");

      op = new Op(Op.DIV, 6, 3);
      BA_UT_is(op.type, Op.DIV, "Op().type == Op.DIV.");
      BA_UT_is(op.get(), 2, "6 / 3 ==> 2");
      op[1] = 2;
      BA_UT_is(op.get(), 3, "6 / 2 ==> 3");
      op[1] = 0;
      BA_UT_is(op.get(), 0, "6 / 0 ==> 0 - this should throw");

      op = new Op(Op.MOD, 3, 2);
      BA_UT_is(op.type, Op.MOD, "Op().type == Op.MOD.");
      BA_UT_is(op.get(), 1, "3 % 2 ==> 1");
      op[1] = 0;
      BA_UT_is(op.get(), 0, "3 % 3 ==> 0");

      op = new Op(Op.AVG, 3, 2);
      BA_UT_is(op.type, Op.AVG, "Op().type == Op.AVG.");
      BA_UT_is(op.get(), 2.5, "3 avg 2 ==> 2.5");
      op[1] = 4;
      BA_UT_is(op.get(), 3.5, "3 avg 4 ==> 3.5");

      op = new Op(Op.POW, 3, 2);
      BA_UT_is(op.type, Op.POW, "Op().type == Op.POW.");
      BA_UT_is(op.get(), 9, "3 ^ 2 ==> 9");
      op[1] = 4;
      BA_UT_is(op.get(), 81, "3 ^ 4 ==> 81");

      op = new Op(Op.SQRT, 81);
      BA_UT_is(op.type, Op.SQRT, "Op().type == Op.SQRT.");
      BA_UT_is(op.get(), 9, "SQRT(81) ==> 9");
      op[0] = 144;
      BA_UT_is(op.get(), 12, "SQRT(144) ==> 12");

      op = new Op(Op.LOG, 5.5);
      BA_UT_is(op.type, Op.LOG, "Op().type == Op.LOG.");
      BA_UT_ok(op.get() > 1.7, "LOG(5.5) ==> 1.704...");
      op[0] = 10;
      BA_UT_ok(op.get() > 2.3, "LOG(10) ==> 2.302...");

      op = new Op(Op.LOG10, 1000);
      BA_UT_is(op.type, Op.LOG10, "Op().type == Op.LOG10.");
      BA_UT_is(op.get(), 3, "LOG10(1000) ==> 3");
      op[0] = 10;
      BA_UT_is(op.get(), 1, "LOG10(10) ==> 1");

      op = new Op(Op.EXP, 2);
      BA_UT_is(op.type, Op.EXP, "Op().type == Op.EXP.");
      BA_UT_ok(op.get() > 7.3, "EXP(2) ==> 7.389...");
      op[0] = 3;
      BA_UT_ok(op.get() > 20, "EXP(3) ==> 20.085...");

      quit();
    ]]>
    </key>
  </code>
</BA>


