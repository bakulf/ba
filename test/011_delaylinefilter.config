<BA>
  <audio>
    <buffers>4</buffers>
  </audio>

  <terminal>
   <escapeSequence>false</escapeSequence>
  </terminal>

  <code>
    <key char="t"><![CDATA[
      var filter = Delayline(1, 2);
      BA_UT_ok(filter, "Delayline() exists.");
      BA_UT_is(filter.name, "delayline", "Delayline().name == 'delayline'");
      BA_UT_is(filter.size, 1, "Delayline().size == 1");
      BA_UT_is(filter.feedback, 2, "Delayline().feedback == 2");
      BA_UT_is(filter.position, 0, "Delayline().position == 0");

      filter = Delayline(1, 2, 3, 4);
      BA_UT_ok(filter, "Delayline() exists.");
      BA_UT_is(filter.name, "delayline", "Delayline().name == 'delayline'");
      BA_UT_is(filter.size, 1, "Delayline().size == 1");
      BA_UT_is(filter.feedback, 2, "Delayline().feedback == 2");
      BA_UT_is(filter.position, 3, "Delayline().position == 2");

      function testAttr(obj, name) {
        var value = Math.random();
        obj[name] = value;
        BA_UT_is(obj[name], value, "Delayline()." + name + " == " + value);

        try {
          obj[name] = "foobar";
          BA_UT_ok(false, "Delayline." + name + " = foo should throw");
        } catch(e) {
          BA_UT_ok(true, "Delayline." + name + " = foo should throw");
        }
      }

      testAttr(filter, 'size');
      testAttr(filter, 'feedback');
      testAttr(filter, 'position');

      try {
        filter.update();
        BA_UT_ok(false, "Delayline.update() with no arguments should throw");
      } catch(e) {
        BA_UT_ok(true, "Delayline.update() with no arguments should throw");
      }

      try {
        filter.update("foo", "bar");
        BA_UT_ok(false, "Delayline.update() with wrong arguments should throw");
      } catch(e) {
        BA_UT_ok(true, "Delayline.update() with wrgon arguments should throw");
      }

      filter.update(11, 22);
      BA_UT_is(filter.size, 11, "Delayline().size == 11");
      BA_UT_is(filter.feedback, 22, "Delayline().feedback == 22");
      BA_UT_is(filter.position, 0, "Delayline().position == 0");

      filter.update(11, 22, 33);
      BA_UT_is(filter.size, 11, "Delayline().size == 11");
      BA_UT_is(filter.feedback, 22, "Delayline().feedback == 22");
      BA_UT_is(filter.position, 33, "Delayline().position == 33");

      quit();
    ]]>
    </key>
  </code>
</BA>
